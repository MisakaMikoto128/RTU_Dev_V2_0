<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\build\0021.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\build\0021.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Tue Apr 30 14:21:07 2024
<BR><P>
<H3>Maximum Stack Usage =       1040 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; APP_Main &rArr; BFL_4G_Init &rArr; BFL_4G_AsyncTaskExecContext_Init &rArr; CHIP_EC800M_Init &rArr; Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[39]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from stm32g4xx_it.o(.text.ADC1_2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[47]">ADC4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[48]">ADC5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32g4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4a]">COMP1_2_3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4b]">COMP4_5_6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4c]">COMP7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[65]">CORDIC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4d]">CRS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32g4xx_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32g4xx_it.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[61]">DMA1_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[62]">DMA2_Channel6_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[63]">DMA2_Channel7_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[64]">DMA2_Channel8_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5f]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32g4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[9c]">Debug_Printf</a> from log.o(.text.Debug_Printf) referenced from bfl_4g_task.o(.rodata.at_adapter)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from chip_ec800m.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[57]">FDCAN2_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[58]">FDCAN2_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[59]">FDCAN3_IT0_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5a]">FDCAN3_IT1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[66]">FMAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[53]">FPU_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[55]">I2C4_ER_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[54]">I2C4_EV_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3b]">LPTIM1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5c]">LPUART1_IRQHandler</a> from hdl_g4_uart.o(.text.LPUART1_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32g4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g4xx_it.o(.text.NMI_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32g4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5b]">RNG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[c]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4e]">SAI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[56]">SPI4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32g4xx_it.o(.text.SVC_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32g4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[68]">SystemInit</a> from system_stm32g4xx.o(.text.SystemInit) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from hdl_g4_cpu_time.o(.text.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[4f]">TIM20_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[52]">TIM20_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[51]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[50]">TIM20_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from hdl_g4_cpu_time.o(.text.TIM2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[41]">TIM7_DAC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from hdl_g4_uart.o(.text.UART4_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from hdl_g4_uart.o(.text.UART5_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[49]">UCPD1_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from hdl_g4_uart.o(.text.USART1_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from hdl_g4_uart.o(.text.USART2_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from hdl_g4_uart.o(.text.USART3_IRQHandler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32g4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32g473xx.o(.text) referenced from startup_stm32g473xx.o(RESET)
 <LI><a href="#[69]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32g473xx.o(.text)
 <LI><a href="#[6b]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[6c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6a]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[99]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[98]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[96]">at_callback</a> from bfl_4g_task.o(.text.at_callback) referenced 2 times from bfl_4g_task.o(.text.at_task_send)
 <LI><a href="#[7f]">at_cfun_callback</a> from bfl_4g_task.o(.text.at_cfun_callback) referenced 2 times from bfl_4g_task.o(.text.at_cfun_task_send)
 <LI><a href="#[73]">at_cfun_task_send</a> from bfl_4g_task.o(.text.at_cfun_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[75]">at_cgact_task_send</a> from bfl_4g_task.o(.text.at_cgact_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[80]">at_cgdcont_callback</a> from bfl_4g_task.o(.text.at_cgdcont_callback) referenced 2 times from bfl_4g_task.o(.text.at_cgdcont_task_send)
 <LI><a href="#[74]">at_cgdcont_task_send</a> from bfl_4g_task.o(.text.at_cgdcont_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[81]">at_clk_callback</a> from bfl_4g_task.o(.text.at_clk_callback) referenced 2 times from bfl_4g_task.o(.text.at_clk_task_send)
 <LI><a href="#[78]">at_clk_task_send</a> from bfl_4g_task.o(.text.at_clk_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[82]">at_cpin_q_callback</a> from bfl_4g_task.o(.text.at_cpin_q_callback) referenced 2 times from bfl_4g_task.o(.text.at_cpin_q_task_send)
 <LI><a href="#[71]">at_cpin_q_task_send</a> from bfl_4g_task.o(.text.at_cpin_q_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[83]">at_creg_q_callback</a> from bfl_4g_task.o(.text.at_creg_q_callback) referenced 2 times from bfl_4g_task.o(.text.at_creg_q_task_send)
 <LI><a href="#[72]">at_creg_q_task_send</a> from bfl_4g_task.o(.text.at_creg_q_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[6f]">at_curr_callback</a> from bfl_4g_task.o(.text.at_curr_callback) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_IOInterfaceInit)
 <LI><a href="#[9b]">at_device_read</a> from bfl_4g_task.o(.text.at_device_read) referenced from bfl_4g_task.o(.rodata.at_adapter)
 <LI><a href="#[9a]">at_device_write</a> from bfl_4g_task.o(.text.at_device_write) referenced from bfl_4g_task.o(.rodata.at_adapter)
 <LI><a href="#[8b]">at_finish</a> from at_chat.o(.text.at_finish) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[84]">at_is_timeout</a> from at_chat.o(.text.at_is_timeout) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[8a]">at_isabort</a> from at_chat.o(.text.at_isabort) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[8d]">at_next_wait</a> from at_chat.o(.text.at_next_wait) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[8e]">at_qicfg_callback</a> from bfl_4g_task.o(.text.at_qicfg_callback) referenced 2 times from bfl_4g_task.o(.text.at_qicfg_task_send)
 <LI><a href="#[79]">at_qicfg_close_task_send</a> from bfl_4g_task.o(.text.at_qicfg_close_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[7a]">at_qicfg_dataformat_task_send</a> from bfl_4g_task.o(.text.at_qicfg_dataformat_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[77]">at_qicfg_task_send</a> from bfl_4g_task.o(.text.at_qicfg_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[8f]">at_qicsgp_callback</a> from bfl_4g_task.o(.text.at_qicsgp_callback) referenced 2 times from bfl_4g_task.o(.text.at_qicsgp_task_send)
 <LI><a href="#[76]">at_qicsgp_task_send</a> from bfl_4g_task.o(.text.at_qicsgp_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[90]">at_qiopen_callback</a> from bfl_4g_task.o(.text.at_qiopen_callback) referenced 2 times from bfl_4g_task.o(.text.at_qiopen_task_send)
 <LI><a href="#[7c]">at_qiopen_task_send_</a> from bfl_4g_task.o(.text.at_qiopen_task_send_) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_TCP_List_TaskCreate)
 <LI><a href="#[7d]">at_qisde_task_send_</a> from bfl_4g_task.o(.text.at_qisde_task_send_) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_TCP_List_TaskCreate)
 <LI><a href="#[91]">at_qisend_callback</a> from bfl_4g_task.o(.text.at_qisend_callback) referenced 2 times from bfl_4g_task.o(.text.at_qisend_task_send)
 <LI><a href="#[7b]">at_qisend_task_send_</a> from bfl_4g_task.o(.text.at_qisend_task_send_) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_TCPWrite_Task)
 <LI><a href="#[92]">at_qiswtmd_callback</a> from bfl_4g_task.o(.text.at_qiswtmd_callback) referenced 2 times from bfl_4g_task.o(.text.at_qiswtmd_task_send)
 <LI><a href="#[7e]">at_qiswtmd_task_send_</a> from bfl_4g_task.o(.text.at_qiswtmd_task_send_) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_TCP_List_TaskCreate)
 <LI><a href="#[8c]">at_reset_timer</a> from at_chat.o(.text.at_reset_timer) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[70]">at_task_send</a> from bfl_4g_task.o(.text.at_task_send) referenced 2 times from bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
 <LI><a href="#[9e]">do_cmd_handler</a> from at_chat.o(.text.do_cmd_handler) referenced 4 times from at_chat.o(.rodata.work_handler_table)
 <LI><a href="#[9d]">do_work_handler</a> from at_chat.o(.text.do_work_handler) referenced from at_chat.o(.rodata.work_handler_table)
 <LI><a href="#[89]">find_substr</a> from at_chat.o(.text.find_substr) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[88]">get_recv_count</a> from at_chat.o(.text.get_recv_count) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[86]">get_recvbuf</a> from at_chat.o(.text.get_recvbuf) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[6d]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[67]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[97]">my_com_logger</a> from log.o(.text.my_com_logger) referenced 2 times from log.o(.text.ulog_init_user)
 <LI><a href="#[85]">println</a> from at_chat.o(.text.println) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[87]">recvbuf_clear</a> from at_chat.o(.text.recvbuf_clear) referenced 2 times from at_chat.o(.text.at_obj_create)
 <LI><a href="#[9f]">send_multiline_handler</a> from at_chat.o(.text.send_multiline_handler) referenced from at_chat.o(.rodata.work_handler_table)
 <LI><a href="#[6e]">setCalibrateTimeByUtcSecondsCb</a> from app_main.o(.text.setCalibrateTimeByUtcSecondsCb) referenced 2 times from app_main.o(.text.APP_Main)
 <LI><a href="#[93]">socket0_recv_handler</a> from bfl_4g_task.o(.text.socket0_recv_handler) referenced 2 times from bfl_4g_task.o(.text.at_socket_ucr_handler)
 <LI><a href="#[94]">socket1_recv_handler</a> from bfl_4g_task.o(.text.socket1_recv_handler) referenced 2 times from bfl_4g_task.o(.text.at_socket_ucr_handler)
 <LI><a href="#[95]">socket2_recv_handler</a> from bfl_4g_task.o(.text.socket2_recv_handler) referenced 2 times from bfl_4g_task.o(.text.at_socket_ucr_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[69]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[219]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[a0]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[21a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[21b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[21c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[21d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[21e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g473xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_SetBaudRate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_at_callback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resp_recv_process
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_item
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cqueue_in
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Create
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_AsyncTaskExecContext_Init
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1fe]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_urc_item
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_substr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket0_recv_handler
</UL>

<P><STRONG><a name="[f3]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_Init
</UL>

<P><STRONG><a name="[210]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_process
</UL>

<P><STRONG><a name="[204]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_info_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmdline
</UL>

<P><STRONG><a name="[a8]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket0_recv_handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clk_callback
</UL>

<P><STRONG><a name="[aa]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket0_recv_handler
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[225]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[226]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[b3]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c3]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c2]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[b6]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a9]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[6a]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[227]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ae]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a1]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[228]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[229]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[b9]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[bb]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[22a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.ADC1_2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>APP_Main</STRONG> (Thumb, 376 bytes, Stack size 344 bytes, app_main.o(.text.APP_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = APP_Main &rArr; BFL_4G_Init &rArr; BFL_4G_AsyncTaskExecContext_Init &rArr; CHIP_EC800M_Init &rArr; Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_GetTick
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Read
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init_user
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_RTU_Packet_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Queue_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseModbus1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_SetCalibrateTimeByUtcSecondsCb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_Poll
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_byte_buffer_clear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_byte_buffer_push_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_byte_buffer_size
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_byte_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>AsyncTaskFuncResultMap</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, bfl_4g_task.o(.text.AsyncTaskFuncResultMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AsyncTaskFuncResultMap
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_curr_callback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_List_BaseCfgTaskCreate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_List_TaskCreate
</UL>

<P><STRONG><a name="[d9]"></a>AsyncTaskList_Create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, asynctasklist.o(.text.AsyncTaskList_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AsyncTaskList_Create &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_AsyncTaskExecContext_Init
</UL>

<P><STRONG><a name="[dc]"></a>AsyncTaskList_DynamicPop</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, asynctasklist.o(.text.AsyncTaskList_DynamicPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AsyncTaskList_DynamicPop &rArr; sc_list_pop_head &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_pop_head
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Next
</UL>

<P><STRONG><a name="[de]"></a>AsyncTaskList_DynamicPush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, asynctasklist.o(.text.AsyncTaskList_DynamicPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AsyncTaskList_DynamicPush &rArr; sc_list_add_tail &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
</UL>

<P><STRONG><a name="[e0]"></a>AsyncTaskList_Exec</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, asynctasklist.o(.text.AsyncTaskList_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AsyncTaskList_Exec &rArr; AsyncTaskList_Next &rArr; AsyncTaskList_DynamicPop &rArr; sc_list_pop_head &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_GetTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Next
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_GetState
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_Poll
</UL>

<P><STRONG><a name="[e6]"></a>AsyncTaskList_IsStaticLastTask</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, asynctasklist.o(.text.AsyncTaskList_IsStaticLastTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AsyncTaskList_IsStaticLastTask
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Next
</UL>

<P><STRONG><a name="[e3]"></a>AsyncTaskList_Next</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, asynctasklist.o(.text.AsyncTaskList_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AsyncTaskList_Next &rArr; AsyncTaskList_DynamicPop &rArr; sc_list_pop_head &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_IsStaticLastTask
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_DynamicPop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_GetRoute
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Destroy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Exec
</UL>

<P><STRONG><a name="[e8]"></a>AsyncTaskList_StaticAdd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, asynctasklist.o(.text.AsyncTaskList_StaticAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AsyncTaskList_StaticAdd &rArr; sc_list_add_tail &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_List_BaseCfgTaskCreate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_List_TaskCreate
</UL>

<P><STRONG><a name="[e9]"></a>AsyncTask_Create</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, asynctasklist.o(.text.AsyncTask_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AsyncTask_Create &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_List_BaseCfgTaskCreate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_List_TaskCreate
</UL>

<P><STRONG><a name="[e7]"></a>AsyncTask_Destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, asynctasklist.o(.text.AsyncTask_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AsyncTask_Destroy &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Next
</UL>

<P><STRONG><a name="[e2]"></a>AsyncTask_Exec</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, asynctasklist.o(.text.AsyncTask_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AsyncTask_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Exec
</UL>

<P><STRONG><a name="[e5]"></a>AsyncTask_GetRoute</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, asynctasklist.o(.text.AsyncTask_GetRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AsyncTask_GetRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Next
</UL>

<P><STRONG><a name="[e1]"></a>AsyncTask_GetState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, asynctasklist.o(.text.AsyncTask_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AsyncTask_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Exec
</UL>

<P><STRONG><a name="[1de]"></a>AsyncTask_SetFuncResult</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, asynctasklist.o(.text.AsyncTask_SetFuncResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AsyncTask_SetFuncResult
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_curr_callback
</UL>

<P><STRONG><a name="[f5]"></a>AsyncTask_SetRoute</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, asynctasklist.o(.text.AsyncTask_SetRoute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AsyncTask_SetRoute
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_List_BaseCfgTaskCreate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_List_TaskCreate
</UL>

<P><STRONG><a name="[1df]"></a>AsyncTask_SetState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, asynctasklist.o(.text.AsyncTask_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AsyncTask_SetState
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_curr_callback
</UL>

<P><STRONG><a name="[ec]"></a>BFL_4G_AsyncTaskExecContext_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.BFL_4G_AsyncTaskExecContext_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = BFL_4G_AsyncTaskExecContext_Init &rArr; CHIP_EC800M_Init &rArr; Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_IOInterfaceInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_List_BaseCfgTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_Init
</UL>

<P><STRONG><a name="[ef]"></a>BFL_4G_IOInterfaceInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bfl_4g_task.o(.text.BFL_4G_IOInterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BFL_4G_IOInterfaceInit &rArr; at_obj_create &rArr; at_obj_destroy &rArr; work_item_destroy_all &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_curr_at_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_AsyncTaskExecContext_Init
</UL>

<P><STRONG><a name="[cd]"></a>BFL_4G_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bfl_4g.o(.text.BFL_4G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BFL_4G_Init &rArr; BFL_4G_AsyncTaskExecContext_Init &rArr; CHIP_EC800M_Init &rArr; Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_AsyncTaskExecContext_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[f0]"></a>BFL_4G_List_BaseCfgTaskCreate</STRONG> (Thumb, 856 bytes, Stack size 136 bytes, bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BFL_4G_List_BaseCfgTaskCreate &rArr; AsyncTaskList_StaticAdd &rArr; sc_list_add_tail &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_SetRoute
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskFuncResultMap
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_StaticAdd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_AsyncTaskExecContext_Init
</UL>

<P><STRONG><a name="[d8]"></a>BFL_4G_Poll</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bfl_4g.o(.text.BFL_4G_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BFL_4G_Poll &rArr; at_obj_process &rArr; at_work_process &rArr; work_item_recycle &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Exec
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_process
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[cf]"></a>BFL_4G_SetCalibrateTimeByUtcSecondsCb</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bfl_4g.o(.text.BFL_4G_SetCalibrateTimeByUtcSecondsCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BFL_4G_SetCalibrateTimeByUtcSecondsCb
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[f7]"></a>BFL_4G_TCPWrite_Task</STRONG> (Thumb, 388 bytes, Stack size 80 bytes, bfl_4g_task.o(.text.BFL_4G_TCPWrite_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BFL_4G_TCPWrite_Task &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_DynamicPush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_SetRoute
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskFuncResultMap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Task_Writeable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Write
</UL>

<P><STRONG><a name="[ce]"></a>BFL_4G_TCP_Init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, bfl_4g.o(.text.BFL_4G_TCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BFL_4G_TCP_Init &rArr; BFL_4G_TCP_List_TaskCreate &rArr; AsyncTaskList_StaticAdd &rArr; sc_list_add_tail &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Task_UCRTable_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_List_TaskCreate
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cqueue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[fa]"></a>BFL_4G_TCP_List_TaskCreate</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, bfl_4g_task.o(.text.BFL_4G_TCP_List_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BFL_4G_TCP_List_TaskCreate &rArr; AsyncTaskList_StaticAdd &rArr; sc_list_add_tail &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_SetRoute
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskFuncResultMap
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_StaticAdd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Init
</UL>

<P><STRONG><a name="[fb]"></a>BFL_4G_TCP_Task_UCRTable_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bfl_4g_task.o(.text.BFL_4G_TCP_Task_UCRTable_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BFL_4G_TCP_Task_UCRTable_Init &rArr; at_obj_set_urc &rArr; obj_map
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_socket_ucr_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Init
</UL>

<P><STRONG><a name="[f8]"></a>BFL_4G_TCP_Task_Writeable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bfl_4g_task.o(.text.BFL_4G_TCP_Task_Writeable))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
</UL>

<P><STRONG><a name="[d6]"></a>BFL_4G_TCP_Write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bfl_4g.o(.text.BFL_4G_TCP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BFL_4G_TCP_Write &rArr; BFL_4G_TCPWrite_Task &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[d0]"></a>BFL_RTU_Packet_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bfl_rtu_packet.o(.text.BFL_RTU_Packet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BFL_RTU_Packet_init &rArr; sc_byte_buffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_byte_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BusFault_Handler &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>CHIP_EC800M_Init</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, chip_ec800m.o(.text.CHIP_EC800M_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = CHIP_EC800M_Init &rArr; Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_ResetOn
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_WakeupOff
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_PowerOn
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_CPU_Time_DelayMs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_AsyncTaskExecContext_Init
</UL>

<P><STRONG><a name="[101]"></a>CHIP_EC800M_PowerOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, chip_ec800m.o(.text.CHIP_EC800M_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHIP_EC800M_PowerOn &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
</UL>

<P><STRONG><a name="[104]"></a>CHIP_EC800M_ResetOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, chip_ec800m.o(.text.CHIP_EC800M_ResetOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHIP_EC800M_ResetOn &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
</UL>

<P><STRONG><a name="[102]"></a>CHIP_EC800M_WakeupOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chip_ec800m.o(.text.CHIP_EC800M_WakeupOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHIP_EC800M_WakeupOff &rArr; LL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>Debug_Printf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, log.o(.text.Debug_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Debug_Printf &rArr; Uart_Write &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_com_logger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.rodata.at_adapter)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, chip_ec800m.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI15_10_IRQHandler &rArr; LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag_0_31
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[18a]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>HAL_InitTick</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_MspInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32g4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[110]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[103]"></a>HDL_CPU_Time_DelayMs</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hdl_g4_cpu_time.o(.text.HDL_CPU_Time_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HDL_CPU_Time_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
</UL>

<P><STRONG><a name="[d4]"></a>HDL_G4_CPU_Time_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hdl_g4_cpu_time.o(.text.HDL_G4_CPU_Time_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_CPU_Time_DelayMs
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ms
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Exec
</UL>

<P><STRONG><a name="[c6]"></a>HDL_G4_CPU_Time_Init</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, hdl_g4_cpu_time.o(.text.HDL_G4_CPU_Time_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HDL_G4_CPU_Time_Init &rArr; LL_TIM_Init &rArr; LL_TIM_SetRepetitionCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableIT_UPDATE
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableIT_UPDATE
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableMasterSlaveMode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[128]"></a>HDL_G4_RTC_GetStructTime</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, hdl_g4_rtc.o(.text.HDL_G4_RTC_GetStructTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HDL_G4_RTC_GetStructTime
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_GetTimeTick
</UL>

<P><STRONG><a name="[127]"></a>HDL_G4_RTC_GetTimeTick</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, hdl_g4_rtc.o(.text.HDL_G4_RTC_GetTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HDL_G4_RTC_GetTimeTick &rArr; mytime_2_utc_sec &rArr; applib_dt_last_day_of_mon &rArr; applib_dt_is_leap_year
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mytime_2_utc_sec
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_GetStructTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrateTimeByUtcSecondsCb
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_com_logger
</UL>

<P><STRONG><a name="[c7]"></a>HDL_G4_RTC_Init</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, hdl_g4_rtc.o(.text.HDL_G4_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HDL_G4_RTC_Init &rArr; HDL_G4_RTC_SetStructTime &rArr; LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro &rArr; LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetStructTime
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_BKP_SetRegister
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_BKP_GetRegister
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_EnableRTC
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_RS
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_DisableClock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRTCClockSource
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_SetDriveCapability
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ReleaseBackupDomainReset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ForceBackupDomainReset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBkUpAccess
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsEnabledBkUpAccess
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_IsEnabledClock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetRTCClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[13a]"></a>HDL_G4_RTC_SetStructTime</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hdl_g4_rtc.o(.text.HDL_G4_RTC_SetStructTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HDL_G4_RTC_SetStructTime &rArr; LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro &rArr; LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_dayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetTimeTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[13f]"></a>HDL_G4_RTC_SetTimeTick</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, hdl_g4_rtc.o(.text.HDL_G4_RTC_SetTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HDL_G4_RTC_SetTimeTick &rArr; HDL_G4_RTC_SetStructTime &rArr; LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro &rArr; LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_sec_2_mytime
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetStructTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrateTimeByUtcSecondsCb
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>LL_GPIO_Init</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[147]"></a>LL_LPUART_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32g4xx_ll_lpuart.o(.text.LL_LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LL_LPUART_Init &rArr; LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_SetPrescaler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_SetBaudRate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_SetHWFlowCtrl
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_SetStopBitsLength
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[14b]"></a>LL_RCC_GetLPUARTClockFreq</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetLPUARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockSource
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[154]"></a>LL_RCC_GetUARTClockFreq</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RCC_GetUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockSource
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[156]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[13e]"></a>LL_RTC_DATE_Init</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_DATE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro &rArr; LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsShadowRegBypassEnabled
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetStructTime
</UL>

<P><STRONG><a name="[15a]"></a>LL_RTC_EnterInitMode</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RTC_EnterInitMode &rArr; LL_RTC_EnableInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableInitMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[138]"></a>LL_RTC_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_RTC_Init &rArr; LL_RTC_EnterInitMode &rArr; LL_RTC_EnableInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_SetAsynchPrescaler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_SetSynchPrescaler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_SetHourFormat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[13c]"></a>LL_RTC_TIME_Init</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_TIME_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro &rArr; LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsShadowRegBypassEnabled
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_GetHourFormat
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetStructTime
</UL>

<P><STRONG><a name="[15e]"></a>LL_RTC_WaitForSynchro</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RTC_WaitForSynchro &rArr; LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_RS
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_ClearFlag_RS
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[1a2]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32g4xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11c]"></a>LL_TIM_Init</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TIM_Init &rArr; LL_TIM_SetRepetitionCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetRepetitionCounter
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[16e]"></a>LL_USART_Init</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetPrescaler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetHWFlowCtrl
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[5c]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, hdl_g4_uart.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LPUART1_IRQHandler &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_DisableIT_TC
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_ClearFlag_PE
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_ClearFlag_FE
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_ClearFlag_ORE
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_IsActiveFlag_ORE
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_ReceiveData8
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_IsActiveFlag_RXNE_RXFNE
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>MX_GPIO_Init</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemManage_Handler &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>QUEUE_PacketCreate</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, queue.o(.text.QUEUE_PacketCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QUEUE_PacketCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[176]"></a>QUEUE_PacketIn</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, queue.o(.text.QUEUE_PacketIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QUEUE_PacketIn
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1af]"></a>QUEUE_PacketOut</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, queue.o(.text.QUEUE_PacketOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QUEUE_PacketOut
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Read
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>Sensor_Queue_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_main.o(.text.Sensor_Queue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sensor_Queue_Init &rArr; cqueue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cqueue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[18b]"></a>SystemClock_Config</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemClock_Config &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_EnableDomain_SYS
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_ConfigDomain_SYS
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Enable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_SetDriveCapability
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBkUpAccess
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_IsReady
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI_Enable
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI48_IsReady
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI48_Enable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_IsReady
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSE_Enable
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableRange1BoostMode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetLatency
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32g4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_ClearFlag_UPDATE
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_IsActiveFlag_UPDATE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, hdl_g4_cpu_time.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, hdl_g4_uart.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART4_IRQHandler &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_PE
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_FE
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_ORE
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE_RXFNE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, hdl_g4_uart.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART5_IRQHandler &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_PE
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_FE
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_ORE
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE_RXFNE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, hdl_g4_uart.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART1_IRQHandler &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketOut
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TXE_TXFNF
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE_TXFNF
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_PE
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_FE
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_ORE
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE_RXFNE
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE_TXFNF
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, hdl_g4_uart.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_IRQHandler &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketOut
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TXE_TXFNF
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TXE_TXFNF
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_PE
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_FE
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_ORE
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE_RXFNE
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE_TXFNF
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, hdl_g4_uart.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART3_IRQHandler &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabledIT_TC
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_PE
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_FE
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_ORE
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ReceiveData8
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_RXNE_RXFNE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>Uart_Init</STRONG> (Thumb, 1714 bytes, Stack size 456 bytes, hdl_g4_uart.o(.text.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketCreate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_IsActiveFlag_REACK
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_IsActiveFlag_TEACK
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_EnableIT_TXFE
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_EnableIT_PE
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_EnableIT_RXNE_RXFNE
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Enable
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_EnableFIFO
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_SetRXFIFOThreshold
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_SetTXFIFOThreshold
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUARTClockSource
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TXFE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_TC
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_PE
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RXNE_RXFNE
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableFIFO
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetRXFIFOThreshold
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTXFIFOThreshold
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init_user
</UL>

<P><STRONG><a name="[d2]"></a>Uart_Read</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, hdl_g4_uart.o(.text.Uart_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart_Read &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketOut
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_read
</UL>

<P><STRONG><a name="[108]"></a>Uart_Write</STRONG> (Thumb, 818 bytes, Stack size 88 bytes, hdl_g4_uart.o(.text.Uart_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Uart_Write &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUEUE_PacketIn
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_EnableIT_TC
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_TransmitData8
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_IsActiveFlag_TXE_TXFNF
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TC
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE_TXFNF
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_TXE_TXFNF
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_device_write
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UsageFault_Handler &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g473xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>applib_dt_dayindex</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, mytime.o(.text.applib_dt_dayindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = applib_dt_dayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_sec_2_mytime
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetStructTime
</UL>

<P><STRONG><a name="[1d7]"></a>applib_dt_is_leap_year</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, mtime.o(.text.applib_dt_is_leap_year))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = applib_dt_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_sec_2_mytime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mytime_2_utc_sec
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_2_utc_sec
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_utc_sec_2_time
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_last_day_of_mon
</UL>

<P><STRONG><a name="[1d6]"></a>applib_dt_last_day_of_mon</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mtime.o(.text.applib_dt_last_day_of_mon))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = applib_dt_last_day_of_mon &rArr; applib_dt_is_leap_year
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_sec_2_mytime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mytime_2_utc_sec
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_2_utc_sec
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_utc_sec_2_time
</UL>

<P><STRONG><a name="[96]"></a>at_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_task_send)
</UL>
<P><STRONG><a name="[7f]"></a>at_cfun_callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_cfun_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_cfun_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_cfun_task_send)
</UL>
<P><STRONG><a name="[73]"></a>at_cfun_task_send</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_cfun_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = at_cfun_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[75]"></a>at_cgact_task_send</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_cgact_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = at_cgact_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[80]"></a>at_cgdcont_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_cgdcont_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_cgdcont_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_cgdcont_task_send)
</UL>
<P><STRONG><a name="[74]"></a>at_cgdcont_task_send</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bfl_4g_task.o(.text.at_cgdcont_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = at_cgdcont_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[81]"></a>at_clk_callback</STRONG> (Thumb, 334 bytes, Stack size 144 bytes, bfl_4g_task.o(.text.at_clk_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = at_clk_callback &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_2_utc_sec
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_clk_task_send)
</UL>
<P><STRONG><a name="[78]"></a>at_clk_task_send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_clk_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_clk_task_send &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[82]"></a>at_cpin_q_callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_cpin_q_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_cpin_q_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_cpin_q_task_send)
</UL>
<P><STRONG><a name="[71]"></a>at_cpin_q_task_send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_cpin_q_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = at_cpin_q_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[83]"></a>at_creg_q_callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_creg_q_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_creg_q_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_creg_q_task_send)
</UL>
<P><STRONG><a name="[72]"></a>at_creg_q_task_send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_creg_q_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_creg_q_task_send &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[6f]"></a>at_curr_callback</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bfl_4g_task.o(.text.at_curr_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_curr_callback &rArr; AsyncTask_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_SetState
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_SetFuncResult
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskFuncResultMap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_IOInterfaceInit)
</UL>
<P><STRONG><a name="[9b]"></a>at_device_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = at_device_read &rArr; Uart_Read &rArr; QUEUE_PacketOut
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.rodata.at_adapter)
</UL>
<P><STRONG><a name="[9a]"></a>at_device_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = at_device_write &rArr; Uart_Write &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.rodata.at_adapter)
</UL>
<P><STRONG><a name="[1d8]"></a>at_exec_cmd</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, at_chat.o(.text.at_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_vcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiswtmd_task_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_task_send
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisde_task_send
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qicsgp_task_send
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cgact_task_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cgdcont_task_send
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cfun_task_send
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cpin_q_task_send
</UL>

<P><STRONG><a name="[1e0]"></a>at_exec_vcmd</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, at_chat.o(.text.at_exec_vcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_work_item
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_free
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_malloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
</UL>

<P><STRONG><a name="[1dc]"></a>at_free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, at_port.o(.text.at_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_free
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisend_callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiswtmd_callback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_callback
</UL>

<P><STRONG><a name="[1e4]"></a>at_get_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, at_port.o(.text.at_get_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_get_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_work_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_timeout_process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reset_timer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_timeout
</UL>

<P><STRONG><a name="[fc]"></a>at_malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, at_port.o(.text.at_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_malloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisend_task_send
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiswtmd_task_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_task_send
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Init
</UL>

<P><STRONG><a name="[f1]"></a>at_obj_create</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, at_chat.o(.text.at_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = at_obj_create &rArr; at_obj_destroy &rArr; work_item_destroy_all &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_destroy
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_IOInterfaceInit
</UL>

<P><STRONG><a name="[1e7]"></a>at_obj_destroy</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_chat.o(.text.at_obj_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = at_obj_destroy &rArr; work_item_destroy_all &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_free
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy_all
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_create
</UL>

<P><STRONG><a name="[f6]"></a>at_obj_process</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, at_chat.o(.text.at_obj_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = at_obj_process &rArr; at_work_process &rArr; work_item_recycle &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_work_process
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resp_recv_process
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_process
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_Poll
</UL>

<P><STRONG><a name="[f2]"></a>at_obj_set_curr_at_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_chat.o(.text.at_obj_set_curr_at_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_obj_set_curr_at_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_IOInterfaceInit
</UL>

<P><STRONG><a name="[ff]"></a>at_obj_set_urc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, at_chat.o(.text.at_obj_set_urc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at_obj_set_urc &rArr; obj_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Task_UCRTable_Init
</UL>

<P><STRONG><a name="[8e]"></a>at_qicfg_callback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_qicfg_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_qicfg_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_qicfg_task_send)
</UL>
<P><STRONG><a name="[79]"></a>at_qicfg_close_task_send</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_qicfg_close_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_qicfg_close_task_send &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[7a]"></a>at_qicfg_dataformat_task_send</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_qicfg_dataformat_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_qicfg_dataformat_task_send &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[77]"></a>at_qicfg_task_send</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_qicfg_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_qicfg_task_send &rArr; at_send_multiline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_multiline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[8f]"></a>at_qicsgp_callback</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_qicsgp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_qicsgp_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_qicsgp_task_send)
</UL>
<P><STRONG><a name="[76]"></a>at_qicsgp_task_send</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_qicsgp_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = at_qicsgp_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_task_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[90]"></a>at_qiopen_callback</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_qiopen_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = at_qiopen_callback &rArr; at_qiopen_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_task_send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_task_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_qiopen_task_send)
</UL>
<P><STRONG><a name="[1ee]"></a>at_qiopen_task_send</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, bfl_4g_task.o(.text.at_qiopen_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = at_qiopen_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_task_send_
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_callback
</UL>

<P><STRONG><a name="[7c]"></a>at_qiopen_task_send_</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_qiopen_task_send_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = at_qiopen_task_send_ &rArr; at_qiopen_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_task_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_TCP_List_TaskCreate)
</UL>
<P><STRONG><a name="[1ef]"></a>at_qisde_task_send</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, bfl_4g_task.o(.text.at_qisde_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = at_qisde_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisde_task_send_
</UL>

<P><STRONG><a name="[7d]"></a>at_qisde_task_send_</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_qisde_task_send_))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = at_qisde_task_send_ &rArr; at_qisde_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisde_task_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_TCP_List_TaskCreate)
</UL>
<P><STRONG><a name="[91]"></a>at_qisend_callback</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, bfl_4g_task.o(.text.at_qisend_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_qisend_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_qisend_task_send)
</UL>
<P><STRONG><a name="[1f0]"></a>at_qisend_task_send</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, bfl_4g_task.o(.text.at_qisend_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = at_qisend_task_send &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisend_task_send_
</UL>

<P><STRONG><a name="[7b]"></a>at_qisend_task_send_</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_qisend_task_send_))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = at_qisend_task_send_ &rArr; at_qisend_task_send &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisend_task_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_TCPWrite_Task)
</UL>
<P><STRONG><a name="[92]"></a>at_qiswtmd_callback</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bfl_4g_task.o(.text.at_qiswtmd_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_qiswtmd_callback &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_qiswtmd_task_send)
</UL>
<P><STRONG><a name="[1f1]"></a>at_qiswtmd_task_send</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, bfl_4g_task.o(.text.at_qiswtmd_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = at_qiswtmd_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_cmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiswtmd_task_send_
</UL>

<P><STRONG><a name="[7e]"></a>at_qiswtmd_task_send_</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bfl_4g_task.o(.text.at_qiswtmd_task_send_))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = at_qiswtmd_task_send_ &rArr; at_qiswtmd_task_send &rArr; at_exec_cmd &rArr; at_exec_vcmd &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiswtmd_task_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_TCP_List_TaskCreate)
</UL>
<P><STRONG><a name="[1ec]"></a>at_send_multiline</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at_chat.o(.text.at_send_multiline))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = at_send_multiline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_work_item
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qicfg_task_send
</UL>

<P><STRONG><a name="[1da]"></a>at_send_singlline</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at_chat.o(.text.at_send_singlline))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_work_item
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisend_task_send
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clk_task_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qicfg_dataformat_task_send
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qicfg_close_task_send
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_creg_q_task_send
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_task_send
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_task_delay
</UL>

<P><STRONG><a name="[fe]"></a>at_socket_ucr_handler</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, bfl_4g_task.o(.text.at_socket_ucr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = at_socket_ucr_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Task_UCRTable_Init
</UL>

<P><STRONG><a name="[1ed]"></a>at_task_delay</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bfl_4g_task.o(.text.at_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = at_task_delay &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_callback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qicsgp_task_send
</UL>

<P><STRONG><a name="[70]"></a>at_task_send</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bfl_4g_task.o(.text.at_task_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at_task_send &rArr; at_send_singlline &rArr; add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.BFL_4G_List_BaseCfgTaskCreate)
</UL>
<P><STRONG><a name="[fd]"></a>cqueue_create</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cqueue.o(.text.cqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cqueue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Queue_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCP_Init
</UL>

<P><STRONG><a name="[1f7]"></a>cqueue_in</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cqueue.o(.text.cqueue_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cqueue_in
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket0_recv_handler
</UL>

<P><STRONG><a name="[1ff]"></a>find_urc_item</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, at_chat.o(.text.find_urc_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = find_urc_item &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_process
</UL>

<P><STRONG><a name="[67]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = main &rArr; APP_Main &rArr; BFL_4G_Init &rArr; BFL_4G_AsyncTaskExecContext_Init &rArr; CHIP_EC800M_Init &rArr; Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d9]"></a>mtime_2_utc_sec</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, mtime.o(.text.mtime_2_utc_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mtime_2_utc_sec &rArr; applib_dt_last_day_of_mon &rArr; applib_dt_is_leap_year
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_last_day_of_mon
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clk_callback
</UL>

<P><STRONG><a name="[206]"></a>mtime_get_week</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, mtime.o(.text.mtime_get_week))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mtime_get_week
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_utc_sec_2_time
</UL>

<P><STRONG><a name="[205]"></a>mtime_utc_sec_2_time</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, mtime.o(.text.mtime_utc_sec_2_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mtime_utc_sec_2_time &rArr; applib_dt_last_day_of_mon &rArr; applib_dt_is_leap_year
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_get_week
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_last_day_of_mon
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_com_logger
</UL>

<P><STRONG><a name="[97]"></a>my_com_logger</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, log.o(.text.my_com_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = my_com_logger &rArr; Debug_Printf &rArr; Uart_Write &rArr; QUEUE_PacketIn
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_GetTimeTick
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_level_name
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtime_utc_sec_2_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.text.ulog_init_user)
</UL>
<P><STRONG><a name="[129]"></a>mytime_2_utc_sec</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, mytime.o(.text.mytime_2_utc_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mytime_2_utc_sec &rArr; applib_dt_last_day_of_mon &rArr; applib_dt_is_leap_year
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_last_day_of_mon
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_GetTimeTick
</UL>

<P><STRONG><a name="[cb]"></a>releaseModbus1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_main.o(.text.releaseModbus1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = releaseModbus1 &rArr; LL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[d7]"></a>sc_byte_buffer_clear</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, sc_byte_buffer.o(.text.sc_byte_buffer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sc_byte_buffer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[c5]"></a>sc_byte_buffer_init</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, sc_byte_buffer.o(.text.sc_byte_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sc_byte_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_RTU_Packet_init
</UL>

<P><STRONG><a name="[209]"></a>sc_byte_buffer_push</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, sc_byte_buffer.o(.text.sc_byte_buffer_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sc_byte_buffer_push
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_byte_buffer_push_data
</UL>

<P><STRONG><a name="[d3]"></a>sc_byte_buffer_push_data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sc_byte_buffer.o(.text.sc_byte_buffer_push_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sc_byte_buffer_push_data &rArr; sc_byte_buffer_push
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_byte_buffer_push
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[d5]"></a>sc_byte_buffer_size</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, sc_byte_buffer.o(.text.sc_byte_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sc_byte_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[df]"></a>sc_list_add_tail</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sc_list.o(.text.sc_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sc_list_add_tail &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_DynamicPush
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_StaticAdd
</UL>

<P><STRONG><a name="[20a]"></a>sc_list_del</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sc_list.o(.text.sc_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sc_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_pop_head
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_add_tail
</UL>

<P><STRONG><a name="[db]"></a>sc_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, sc_list.o(.text.sc_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sc_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Create
</UL>

<P><STRONG><a name="[e4]"></a>sc_list_is_empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sc_list.o(.text.sc_list_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sc_list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Next
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_pop_head
</UL>

<P><STRONG><a name="[dd]"></a>sc_list_pop_head</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sc_list.o(.text.sc_list_pop_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sc_list_pop_head &rArr; sc_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_is_empty
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_DynamicPop
</UL>

<P><STRONG><a name="[6e]"></a>setCalibrateTimeByUtcSecondsCb</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, app_main.o(.text.setCalibrateTimeByUtcSecondsCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = setCalibrateTimeByUtcSecondsCb &rArr; HDL_G4_RTC_SetTimeTick &rArr; HDL_G4_RTC_SetStructTime &rArr; LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro &rArr; LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetTimeTick
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_GetTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_main.o(.text.APP_Main)
</UL>
<P><STRONG><a name="[93]"></a>socket0_recv_handler</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, bfl_4g_task.o(.text.socket0_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = socket0_recv_handler &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cqueue_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_socket_ucr_handler)
</UL>
<P><STRONG><a name="[94]"></a>socket1_recv_handler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, bfl_4g_task.o(.text.socket1_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = socket1_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_socket_ucr_handler)
</UL>
<P><STRONG><a name="[95]"></a>socket2_recv_handler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, bfl_4g_task.o(.text.socket2_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = socket2_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bfl_4g_task.o(.text.at_socket_ucr_handler)
</UL>
<P><STRONG><a name="[20b]"></a>ulog_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ulog.o(.text.ulog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init_user
</UL>

<P><STRONG><a name="[c8]"></a>ulog_init_user</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, log.o(.text.ulog_init_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ulog_init_user &rArr; Uart_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_subscribe
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[207]"></a>ulog_level_name</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, ulog.o(.text.ulog_level_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ulog_level_name
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_com_logger
</UL>

<P><STRONG><a name="[ed]"></a>ulog_message</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ulog.o(.text.ulog_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_recycle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_work_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCalibrateTimeByUtcSecondsCb
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket0_recv_handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_IOInterfaceInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qisend_callback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiswtmd_callback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qiopen_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_clk_callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qicfg_callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_qicsgp_callback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cgdcont_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cfun_callback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_creg_q_callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cpin_q_callback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_callback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_AsyncTaskExecContext_Init
</UL>

<P><STRONG><a name="[20c]"></a>ulog_subscribe</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, ulog.o(.text.ulog_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ulog_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init_user
</UL>

<P><STRONG><a name="[140]"></a>utc_sec_2_mytime</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, mytime.o(.text.utc_sec_2_mytime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = utc_sec_2_mytime &rArr; applib_dt_last_day_of_mon &rArr; applib_dt_is_leap_year
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_dayindex
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_last_day_of_mon
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applib_dt_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_SetTimeTick
</UL>

<P><STRONG><a name="[211]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22c]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[22d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[22e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[f9]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFL_4G_TCPWrite_Task
</UL>

<P><STRONG><a name="[213]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22f]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[230]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[231]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[107]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Printf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_vcmd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_line
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[232]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[233]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[234]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[235]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[eb]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Destroy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>

<P><STRONG><a name="[da]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTaskList_Create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncTask_Create
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18c]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_FLASH_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[18d]"></a>LL_FLASH_GetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_FLASH_GetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[18e]"></a>LL_PWR_EnableRange1BoostMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_PWR_EnableRange1BoostMode))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[18f]"></a>LL_RCC_HSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[190]"></a>LL_RCC_HSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[191]"></a>LL_RCC_HSI48_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSI48_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[192]"></a>LL_RCC_HSI48_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSI48_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[193]"></a>LL_RCC_LSI_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[194]"></a>LL_RCC_LSI_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[195]"></a>LL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[196]"></a>LL_RCC_LSE_SetDriveCapability</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_LSE_SetDriveCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_LSE_SetDriveCapability
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[197]"></a>LL_RCC_LSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[198]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[199]"></a>LL_RCC_PLL_ConfigDomain_SYS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text.LL_RCC_PLL_ConfigDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_RCC_PLL_ConfigDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19a]"></a>LL_RCC_PLL_EnableDomain_SYS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_EnableDomain_SYS))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19b]"></a>LL_RCC_PLL_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19c]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19d]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19e]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19f]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a0]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a1]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17f]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[180]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[141]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[142]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[143]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[144]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[145]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[146]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32g4xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[115]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[112]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[113]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32g4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[114]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[116]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32g4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[148]"></a>LL_LPUART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_lpuart.o(.text.LL_LPUART_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[149]"></a>LL_LPUART_SetStopBitsLength</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_ll_lpuart.o(.text.LL_LPUART_SetStopBitsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_SetStopBitsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[14a]"></a>LL_LPUART_SetHWFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_ll_lpuart.o(.text.LL_LPUART_SetHWFlowCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_SetHWFlowCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[14c]"></a>LL_LPUART_SetBaudRate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32g4xx_ll_lpuart.o(.text.LL_LPUART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_LPUART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[14d]"></a>LL_LPUART_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g4xx_ll_lpuart.o(.text.LL_LPUART_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[150]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[184]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[14f]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[152]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[153]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[158]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32g4xx_ll_rcc.o(.text.RCC_GetPCLK2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[185]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32g4xx_ll_rcc.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[181]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[182]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[183]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
</UL>

<P><STRONG><a name="[157]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[151]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[155]"></a>LL_RCC_GetUARTClockSource</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetUARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_GetUARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUARTClockFreq
</UL>

<P><STRONG><a name="[14e]"></a>LL_RCC_GetLPUARTClockSource</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_GetLPUARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_GetLPUARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[186]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[187]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[188]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[189]"></a>LL_RCC_PLL_GetR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rcc.o(.text.LL_RCC_PLL_GetR))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[16f]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[170]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetStopBitsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetStopBitsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[171]"></a>LL_USART_SetHWFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetHWFlowCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetHWFlowCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[172]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[173]"></a>LL_USART_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g4xx_ll_usart.o(.text.LL_USART_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[159]"></a>LL_RTC_DisableWriteProtection</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_DisableWriteProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_DisableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[15c]"></a>LL_RTC_DisableInitMode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_DisableInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_DisableInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[15f]"></a>LL_RTC_EnableWriteProtection</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_EnableWriteProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_EnableWriteProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[160]"></a>LL_RTC_IsActiveFlag_INIT</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_IsActiveFlag_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_IsActiveFlag_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[161]"></a>LL_RTC_EnableInitMode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_EnableInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_EnableInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[162]"></a>LL_SYSTICK_IsActiveCounterFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_ll_rtc.o(.text.LL_SYSTICK_IsActiveCounterFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[168]"></a>LL_RTC_ClearFlag_RS</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_ClearFlag_RS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_RS
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[169]"></a>LL_RTC_IsActiveFlag_RS</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_IsActiveFlag_RS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[163]"></a>LL_RTC_SetHourFormat</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_SetHourFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_SetHourFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[164]"></a>LL_RTC_SetSynchPrescaler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_SetSynchPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_SetSynchPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[165]"></a>LL_RTC_SetAsynchPrescaler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_SetAsynchPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_SetAsynchPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
</UL>

<P><STRONG><a name="[166]"></a>LL_RTC_GetHourFormat</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_GetHourFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_GetHourFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[167]"></a>LL_RTC_TIME_Config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_TIME_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_RTC_TIME_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[15d]"></a>LL_RTC_IsShadowRegBypassEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_IsShadowRegBypassEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_IsShadowRegBypassEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[15b]"></a>LL_RTC_DATE_Config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32g4xx_ll_rtc.o(.text.LL_RTC_DATE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_RTC_DATE_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[16a]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[16b]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[16c]"></a>LL_TIM_SetRepetitionCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_SetRepetitionCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetRepetitionCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[16d]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32g4xx_ll_tim.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[12a]"></a>LL_RCC_GetRTCClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hdl_g4_rtc.o(.text.LL_RCC_GetRTCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[12b]"></a>LL_APB1_GRP1_IsEnabledClock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hdl_g4_rtc.o(.text.LL_APB1_GRP1_IsEnabledClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_IsEnabledClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[12c]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hdl_g4_rtc.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[12d]"></a>LL_PWR_IsEnabledBkUpAccess</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, hdl_g4_rtc.o(.text.LL_PWR_IsEnabledBkUpAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_PWR_IsEnabledBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[12e]"></a>LL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hdl_g4_rtc.o(.text.LL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[12f]"></a>LL_RCC_ForceBackupDomainReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hdl_g4_rtc.o(.text.LL_RCC_ForceBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[130]"></a>LL_RCC_ReleaseBackupDomainReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hdl_g4_rtc.o(.text.LL_RCC_ReleaseBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[131]"></a>LL_RCC_LSE_SetDriveCapability</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hdl_g4_rtc.o(.text.LL_RCC_LSE_SetDriveCapability))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_LSE_SetDriveCapability
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[132]"></a>LL_RCC_LSE_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hdl_g4_rtc.o(.text.LL_RCC_LSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[133]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hdl_g4_rtc.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[134]"></a>LL_RCC_SetRTCClockSource</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hdl_g4_rtc.o(.text.LL_RCC_SetRTCClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetRTCClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[135]"></a>LL_APB1_GRP1_DisableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, hdl_g4_rtc.o(.text.LL_APB1_GRP1_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[136]"></a>LL_RTC_ClearFlag_RS</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, hdl_g4_rtc.o(.text.LL_RTC_ClearFlag_RS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RTC_ClearFlag_RS
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[137]"></a>LL_RCC_EnableRTC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hdl_g4_rtc.o(.text.LL_RCC_EnableRTC))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[139]"></a>LL_RTC_BKP_GetRegister</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, hdl_g4_rtc.o(.text.LL_RTC_BKP_GetRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_RTC_BKP_GetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[13b]"></a>LL_RTC_BKP_SetRegister</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hdl_g4_rtc.o(.text.LL_RTC_BKP_SetRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_RTC_BKP_SetRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_RTC_Init
</UL>

<P><STRONG><a name="[1b4]"></a>LL_RCC_SetUSARTClockSource</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_RCC_SetUSARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1b5]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1b6]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1b7]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hdl_g4_uart.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1b8]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hdl_g4_uart.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1b9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1ba]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1bb]"></a>LL_USART_SetTXFIFOThreshold</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, hdl_g4_uart.o(.text.LL_USART_SetTXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_USART_SetTXFIFOThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1bc]"></a>LL_USART_SetRXFIFOThreshold</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, hdl_g4_uart.o(.text.LL_USART_SetRXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_USART_SetRXFIFOThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1bd]"></a>LL_USART_EnableFIFO</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_EnableFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_EnableFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1be]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_ConfigAsyncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ConfigAsyncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1bf]"></a>LL_USART_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c0]"></a>LL_USART_EnableIT_RXNE_RXFNE</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_EnableIT_RXNE_RXFNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_EnableIT_RXNE_RXFNE
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c1]"></a>LL_USART_EnableIT_PE</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_EnableIT_PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_EnableIT_PE
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1ac]"></a>LL_USART_DisableIT_TC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_DisableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_DisableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c2]"></a>LL_USART_DisableIT_TXFE</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_DisableIT_TXFE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_DisableIT_TXFE
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c3]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c4]"></a>LL_RCC_SetUARTClockSource</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_RCC_SetUARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetUARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c5]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c6]"></a>LL_LPUART_SetTXFIFOThreshold</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, hdl_g4_uart.o(.text.LL_LPUART_SetTXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_LPUART_SetTXFIFOThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c7]"></a>LL_LPUART_SetRXFIFOThreshold</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, hdl_g4_uart.o(.text.LL_LPUART_SetRXFIFOThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_LPUART_SetRXFIFOThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c8]"></a>LL_LPUART_EnableFIFO</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_EnableFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_EnableFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1c9]"></a>LL_LPUART_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1ca]"></a>LL_LPUART_EnableIT_RXNE_RXFNE</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_LPUART_EnableIT_RXNE_RXFNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_EnableIT_RXNE_RXFNE
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1cb]"></a>LL_LPUART_EnableIT_PE</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_LPUART_EnableIT_PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_EnableIT_PE
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1cc]"></a>LL_LPUART_EnableIT_TXFE</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_LPUART_EnableIT_TXFE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_EnableIT_TXFE
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1cd]"></a>LL_LPUART_IsActiveFlag_TEACK</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_IsActiveFlag_TEACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_IsActiveFlag_TEACK
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1ce]"></a>LL_LPUART_IsActiveFlag_REACK</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_IsActiveFlag_REACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_IsActiveFlag_REACK
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[1cf]"></a>LL_USART_EnableIT_TXE_TXFNF</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_EnableIT_TXE_TXFNF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_EnableIT_TXE_TXFNF
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1ae]"></a>LL_USART_IsActiveFlag_TXE_TXFNF</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_IsActiveFlag_TXE_TXFNF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsActiveFlag_TXE_TXFNF
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1b0]"></a>LL_USART_TransmitData8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1b2]"></a>LL_USART_EnableIT_TC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_EnableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_EnableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1d0]"></a>LL_LPUART_IsActiveFlag_TXE_TXFNF</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_IsActiveFlag_TXE_TXFNF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_IsActiveFlag_TXE_TXFNF
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1d1]"></a>LL_LPUART_TransmitData8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_LPUART_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1d2]"></a>LL_LPUART_EnableIT_TC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_LPUART_EnableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_EnableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Write
</UL>

<P><STRONG><a name="[1a6]"></a>LL_USART_IsActiveFlag_RXNE_RXFNE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_IsActiveFlag_RXNE_RXFNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsActiveFlag_RXNE_RXFNE
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>LL_USART_ReceiveData8</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_ReceiveData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ReceiveData8
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>LL_USART_IsActiveFlag_ORE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_IsActiveFlag_ORE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsActiveFlag_ORE
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>LL_USART_ClearFlag_ORE</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_ClearFlag_ORE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_ORE
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>LL_USART_ClearFlag_FE</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_ClearFlag_FE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_FE
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>LL_USART_ClearFlag_PE</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_ClearFlag_PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_PE
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>LL_USART_IsEnabledIT_TXE_TXFNF</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_IsEnabledIT_TXE_TXFNF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsEnabledIT_TXE_TXFNF
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b1]"></a>LL_USART_DisableIT_TXE_TXFNF</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_USART_DisableIT_TXE_TXFNF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_DisableIT_TXE_TXFNF
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>LL_USART_IsEnabledIT_TC</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_IsEnabledIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsEnabledIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>LL_USART_IsActiveFlag_TC</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_USART_IsActiveFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsActiveFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>LL_LPUART_IsActiveFlag_RXNE_RXFNE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_IsActiveFlag_RXNE_RXFNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_IsActiveFlag_RXNE_RXFNE
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>LL_LPUART_ReceiveData8</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_ReceiveData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_ReceiveData8
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>LL_LPUART_IsActiveFlag_ORE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_IsActiveFlag_ORE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_IsActiveFlag_ORE
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>LL_LPUART_ClearFlag_ORE</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_ClearFlag_ORE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_ClearFlag_ORE
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>LL_LPUART_ClearFlag_FE</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_ClearFlag_FE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_ClearFlag_FE
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>LL_LPUART_ClearFlag_PE</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hdl_g4_uart.o(.text.LL_LPUART_ClearFlag_PE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_LPUART_ClearFlag_PE
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>LL_LPUART_DisableIT_TC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hdl_g4_uart.o(.text.LL_LPUART_DisableIT_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_LPUART_DisableIT_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[118]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hdl_g4_cpu_time.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[119]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hdl_g4_cpu_time.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[11a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[11b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[11d]"></a>LL_TIM_DisableARRPreload</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_DisableARRPreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_DisableARRPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[11e]"></a>LL_TIM_SetClockSource</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[11f]"></a>LL_TIM_SetTriggerOutput</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_SetTriggerOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetTriggerOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[120]"></a>LL_TIM_SetTriggerOutput2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_SetTriggerOutput2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetTriggerOutput2
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[121]"></a>LL_TIM_DisableMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_DisableMasterSlaveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_DisableMasterSlaveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[122]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[123]"></a>LL_TIM_EnableIT_UPDATE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_EnableIT_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_EnableIT_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[124]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[125]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hdl_g4_cpu_time.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[126]"></a>LL_TIM_DisableIT_UPDATE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_DisableIT_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_DisableIT_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDL_G4_CPU_Time_Init
</UL>

<P><STRONG><a name="[1a4]"></a>LL_TIM_IsActiveFlag_UPDATE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_IsActiveFlag_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_IsActiveFlag_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>LL_TIM_ClearFlag_UPDATE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hdl_g4_cpu_time.o(.text.LL_TIM_ClearFlag_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_ClearFlag_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chip_ec800m.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_Init
</UL>

<P><STRONG><a name="[109]"></a>LL_EXTI_IsActiveFlag_0_31</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, chip_ec800m.o(.text.LL_EXTI_IsActiveFlag_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_IsActiveFlag_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>LL_EXTI_ClearFlag_0_31</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, chip_ec800m.o(.text.LL_EXTI_ClearFlag_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_ec800m.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_ResetOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_PowerOn
</UL>

<P><STRONG><a name="[106]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chip_ec800m.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHIP_EC800M_WakeupOff
</UL>

<P><STRONG><a name="[208]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_main.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;releaseModbus1
</UL>

<P><STRONG><a name="[ca]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_main.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Main
</UL>

<P><STRONG><a name="[1e1]"></a>obj_map</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, at_chat.o(.text.obj_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = obj_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_vcmd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_destroy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_next_wait
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_reset_timer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_finish
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_isabort
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_substr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recv_count
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvbuf_clear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_recvbuf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;println
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_is_timeout
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_multiline
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_process
</UL>

<P><STRONG><a name="[1dd]"></a>at_core_malloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, at_chat.o(.text.at_core_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_vcmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_create
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_line
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_create
</UL>

<P><STRONG><a name="[1e6]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, at_chat.o(.text.INIT_LIST_HEAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = INIT_LIST_HEAD
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_create
</UL>

<P><STRONG><a name="[84]"></a>at_is_timeout</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, at_chat.o(.text.at_is_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_is_timeout &rArr; at_get_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[85]"></a>println</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, at_chat.o(.text.println))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = println &rArr; at_send_line &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_line
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[86]"></a>get_recvbuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, at_chat.o(.text.get_recvbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_recvbuf &rArr; obj_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[87]"></a>recvbuf_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at_chat.o(.text.recvbuf_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = recvbuf_clear &rArr; obj_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[88]"></a>get_recv_count</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at_chat.o(.text.get_recv_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_recv_count &rArr; obj_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[89]"></a>find_substr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at_chat.o(.text.find_substr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_substr &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multiline_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[8a]"></a>at_isabort</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, at_chat.o(.text.at_isabort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at_isabort &rArr; obj_map
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[8b]"></a>at_finish</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, at_chat.o(.text.at_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = at_finish &rArr; update_work_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_work_state
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[8c]"></a>at_reset_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_chat.o(.text.at_reset_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_reset_timer &rArr; at_get_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ms
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[8d]"></a>at_next_wait</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, at_chat.o(.text.at_next_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at_next_wait &rArr; __get_adapter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.text.at_obj_create)
</UL>
<P><STRONG><a name="[1e8]"></a>work_item_destroy_all</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, at_chat.o(.text.work_item_destroy_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = work_item_destroy_all &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_unlock
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_destroy
</UL>

<P><STRONG><a name="[1db]"></a>at_core_free</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, at_chat.o(.text.at_core_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_core_free &rArr; at_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_vcmd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_destroy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_line
</UL>

<P><STRONG><a name="[1f2]"></a>at_send_line</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, at_chat.o(.text.at_send_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = at_send_line &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_free
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_malloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;println
</UL>

<P><STRONG><a name="[1e3]"></a>update_work_state</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, at_chat.o(.text.update_work_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_work_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_at_callback
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_work_process
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_finish
</UL>

<P><STRONG><a name="[1e2]"></a>__get_adapter</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, at_chat.o(.text.__get_adapter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_vcmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multiline_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_at_callback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmdline
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_handler_entry
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_timeout_process
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_process
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_item
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_unlock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_lock
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_next_wait
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_process
</UL>

<P><STRONG><a name="[1e5]"></a>at_lock</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_chat.o(.text.at_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = at_lock &rArr; __get_adapter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_recycle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_work_process
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumit_work_item
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy_all
</UL>

<P><STRONG><a name="[202]"></a>list_del</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, at_chat.o(.text.list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_recycle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy_all
</UL>

<P><STRONG><a name="[1fa]"></a>work_item_destroy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_chat.o(.text.work_item_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = work_item_destroy &rArr; at_core_free &rArr; at_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_recycle
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_item
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy_all
</UL>

<P><STRONG><a name="[1f4]"></a>at_unlock</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_chat.o(.text.at_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = at_unlock &rArr; __get_adapter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_recycle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_work_process
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumit_work_item
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy_all
</UL>

<P><STRONG><a name="[1f5]"></a>list_empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, at_chat.o(.text.list_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_work_process
</UL>

<P><STRONG><a name="[1d3]"></a>add_work_item</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, at_chat.o(.text.add_work_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = add_work_item &rArr; create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumit_work_item
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_exec_vcmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_multiline
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_singlline
</UL>

<P><STRONG><a name="[1d4]"></a>create_work_item</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, at_chat.o(.text.create_work_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = create_work_item &rArr; work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_create
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_work_item
</UL>

<P><STRONG><a name="[1d5]"></a>sumit_work_item</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, at_chat.o(.text.sumit_work_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sumit_work_item &rArr; list_add_tail &rArr; __list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_unlock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_work_item
</UL>

<P><STRONG><a name="[1e9]"></a>urc_recv_process</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, at_chat.o(.text.urc_recv_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = urc_recv_process &rArr; urc_timeout_process &rArr; urc_handler_entry &rArr; urc_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_urc_item
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_handler_entry
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_reset
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_timeout_process
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_process
</UL>

<P><STRONG><a name="[1ea]"></a>resp_recv_process</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, at_chat.o(.text.resp_recv_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = resp_recv_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_process
</UL>

<P><STRONG><a name="[1eb]"></a>at_work_process</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, at_chat.o(.text.at_work_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_work_process &rArr; work_item_recycle &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_recycle
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_unlock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_lock
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_work_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_process
</UL>

<P><STRONG><a name="[20f]"></a>urc_timeout_process</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, at_chat.o(.text.urc_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = urc_timeout_process &rArr; urc_handler_entry &rArr; urc_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ms
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_handler_entry
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_reset
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_process
</UL>

<P><STRONG><a name="[20e]"></a>urc_reset</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, at_chat.o(.text.urc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = urc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_handler_entry
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_timeout_process
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_process
</UL>

<P><STRONG><a name="[20d]"></a>urc_handler_entry</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, at_chat.o(.text.urc_handler_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = urc_handler_entry &rArr; urc_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_reset
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_timeout_process
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recv_process
</UL>

<P><STRONG><a name="[1f6]"></a>work_item_recycle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at_chat.o(.text.work_item_recycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = work_item_recycle &rArr; list_del &rArr; ulog_message &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_message
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_unlock
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_item_destroy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_work_process
</UL>

<P><STRONG><a name="[1f3]"></a>send_data</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, at_chat.o(.text.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_data &rArr; __get_adapter
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_line
</UL>

<P><STRONG><a name="[203]"></a>__list_del</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_chat.o(.text.__list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>

<P><STRONG><a name="[1f9]"></a>work_item_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_chat.o(.text.work_item_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = work_item_create &rArr; at_core_malloc &rArr; at_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_core_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_work_item
</UL>

<P><STRONG><a name="[200]"></a>list_add_tail</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at_chat.o(.text.list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = list_add_tail &rArr; __list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sumit_work_item
</UL>

<P><STRONG><a name="[201]"></a>__list_add</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, at_chat.o(.text.__list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>

<P><STRONG><a name="[9d]"></a>do_work_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at_chat.o(.text.do_work_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = do_work_handler &rArr; at_get_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.rodata.work_handler_table)
</UL>
<P><STRONG><a name="[9e]"></a>do_cmd_handler</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, at_chat.o(.text.do_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = do_cmd_handler &rArr; do_at_callback &rArr; update_work_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_at_callback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_info_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmdline
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.rodata.work_handler_table)
</UL>
<P><STRONG><a name="[1fc]"></a>send_cmdline</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at_chat.o(.text.send_cmdline))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_cmdline &rArr; __get_adapter
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multiline_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_handler
</UL>

<P><STRONG><a name="[1fd]"></a>match_info_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, at_chat.o(.text.match_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = match_info_init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multiline_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_handler
</UL>

<P><STRONG><a name="[1fb]"></a>do_at_callback</STRONG> (Thumb, 502 bytes, Stack size 72 bytes, at_chat.o(.text.do_at_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = do_at_callback &rArr; update_work_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_work_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_multiline_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_handler
</UL>

<P><STRONG><a name="[9f]"></a>send_multiline_handler</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, at_chat.o(.text.send_multiline_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = send_multiline_handler &rArr; do_at_callback &rArr; update_work_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_at_callback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_info_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmdline
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_adapter
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_substr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_chat.o(.rodata.work_handler_table)
</UL>
<P><STRONG><a name="[214]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[212]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[217]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[216]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[99]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[98]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[b4]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[6c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
